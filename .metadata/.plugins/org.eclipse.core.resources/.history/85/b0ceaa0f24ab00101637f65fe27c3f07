package co.edu.uco.ucochallenge.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	private static final String ADMIN_EMAIL = "admin@uco.edu.co";
	private static final String ADMIN_PASSWORD = "admin123";
	
	@Bean
	public PasswordEncoder passwordEncoder() {
	    return new BCryptPasswordEncoder();
	}
	
	@Bean
	public UserDetailsService userDetailsService(PasswordEncoder encoder) {
	    UserDetails admin = User.builder()
	        .username(ADMIN_EMAIL)
	        .password(encoder.encode(ADMIN_PASSWORD))
	        .roles("ADMIN")
	        .build();
	    
	    return new InMemoryUserDetailsManager(admin);
	}
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(authorize -> authorize
                // Permitir acceso al login sin autenticaci√≥n
                .requestMatchers("/api/auth/token").permitAll() 
                
                // Proteger el endpoint de usuarios, requiere rol ADMIN
                .requestMatchers("/api/v1/usuarios/**").hasRole("ADMIN") 
                
                .anyRequest().authenticated()
            );

        return http.build();
    }

}
